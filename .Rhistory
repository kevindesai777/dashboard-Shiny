rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
}
}
View(hourCrashDataT)
hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash
sum(hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash)
hourCrashDataT = data.frame(matrix(0, ncol = 8, nrow = 28))
colnames(hourCrashDataT) <- c("Hour","rootCrash","analyticsCrash","dataCrash","playerCrash","processesCrash","processEditorCrash","averageBytes")
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
rowNum = ceiling(crashData$timestamp[1]/3600)
for(i in 1:nrow(crashData)){
if(ceiling(crashData$timestamp[i]/3600) == rowNum){
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
else{
#newrow = c(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
#hourCrashDataT[rowNum] = data.frame(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
hourCrashDataT$Hour[rowNum] <-rowNum
hourCrashDataT$rootCrash[rowNum] <- rootCount
hourCrashDataT$analyticsCrash[rowNum] <- analyticsCount
hourCrashDataT$dataCrash[rowNum] <- dataCount
hourCrashDataT$playerCrash[rowNum] <- playerCount
hourCrashDataT$processesCrash[rowNum] <- processCrash
hourCrashDataT$processEditorCrash[rowNum] <- procEditorCrash
hourCrashDataT$averageBytes[rowNum] <- 0
rowNum = ceiling(crashData$timestamp[i]/3600)
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
}
sum(hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash)
View(hourCrashDataT)
hourCrashDataT = data.frame(matrix(0, ncol = 8, nrow = 27))
colnames(hourCrashDataT) <- c("Hour","rootCrash","analyticsCrash","dataCrash","playerCrash","processesCrash","processEditorCrash","averageBytes")
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
rowNum = ceiling(crashData$timestamp[1]/3600)
for(i in 1:nrow(crashData)){
if(ceiling(crashData$timestamp[i]/3600) == rowNum){
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
else{
#newrow = c(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
#hourCrashDataT[rowNum] = data.frame(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
hourCrashDataT$Hour[rowNum] <-rowNum
hourCrashDataT$rootCrash[rowNum] <- rootCount
hourCrashDataT$analyticsCrash[rowNum] <- analyticsCount
hourCrashDataT$dataCrash[rowNum] <- dataCount
hourCrashDataT$playerCrash[rowNum] <- playerCount
hourCrashDataT$processesCrash[rowNum] <- processCrash
hourCrashDataT$processEditorCrash[rowNum] <- procEditorCrash
hourCrashDataT$averageBytes[rowNum] <- 0
rowNum = ceiling(crashData$timestamp[i]/3600)
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
}
sum(hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash)
shiny::runApp()
View(hourCrashDataT)
library(shiny)
library(plyr)
library(googleVis)
library(ggplot2)
library(jsonlite)
library(plyr)
shiny::runApp()
View(hourCrashDataT)
View(hourCrashDataT)
View(crashData)
levels(crashData$current_page)
summary(crashData$current_page)
summary(hourCrashDataT)
sum(hourCrashDataT$rootCrash)
sum(hourCrashDataT$analyticsCrash)
hourCrashDataT = data.frame(matrix(0, ncol = 7, nrow = 27))
View(hourCrashDataT)
colnames(hourCrashDataT) <- c("Hour","rootCrash","analyticsCrash","dataCrash","playerCrash","processesCrash","processEditorCrash")
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
rowNum = ceiling(crashData$timestamp[1]/3600)
for(i in 1:nrow(crashData)){
if(ceiling(crashData$timestamp[i]/3600) == rowNum){
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
else{
#newrow = c(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
#hourCrashDataT[rowNum] = data.frame(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
hourCrashDataT$Hour[rowNum] <-rowNum
hourCrashDataT$rootCrash[rowNum] <- rootCount
hourCrashDataT$analyticsCrash[rowNum] <- analyticsCount
hourCrashDataT$dataCrash[rowNum] <- dataCount
hourCrashDataT$playerCrash[rowNum] <- playerCount
hourCrashDataT$processesCrash[rowNum] <- processCrash
hourCrashDataT$processEditorCrash[rowNum] <- procEditorCrash
rowNum = ceiling(crashData$timestamp[i]/3600)
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
}
tail(crashData)
99935/3600
hourCrashDataT = data.frame(matrix(0, ncol = 7, nrow = 27))
colnames(hourCrashDataT) <- c("Hour","rootCrash","analyticsCrash","dataCrash","playerCrash","processesCrash","processEditorCrash")
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
rowNum = ceiling(crashData$timestamp[1]/3600)
for(i in 1:nrow(crashData)){
if(ceiling(crashData$timestamp[i]/3600) == rowNum){
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
else{
#newrow = c(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
#hourCrashDataT[rowNum] = data.frame(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
hourCrashDataT$Hour[rowNum] <-rowNum
hourCrashDataT$rootCrash[rowNum] <- rootCount
hourCrashDataT$analyticsCrash[rowNum] <- analyticsCount
hourCrashDataT$dataCrash[rowNum] <- dataCount
hourCrashDataT$playerCrash[rowNum] <- playerCount
hourCrashDataT$processesCrash[rowNum] <- processCrash
hourCrashDataT$processEditorCrash[rowNum] <- procEditorCrash
rowNum = ceiling(crashData$timestamp[i]/3600)
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
}
rootCount
hourCrashDataT$Hour[28] <-rowNum
hourCrashDataT$rootCrash[28] <- rootCount
hourCrashDataT$analyticsCrash[28] <- analyticsCount
hourCrashDataT$dataCrash[28] <- dataCount
hourCrashDataT$playerCrash[28] <- playerCount
hourCrashDataT$processesCrash[28] <- processCrash
hourCrashDataT$processEditorCrash[28] <- procEditorCrash
shiny::runApp()
shiny::runApp()
sum(hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash)
hourCrashDataT = data.frame(matrix(0, ncol = 7, nrow = 28))
colnames(hourCrashDataT) <- c("Hour","rootCrash","analyticsCrash","dataCrash","playerCrash","processesCrash","processEditorCrash")
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
rowNum = ceiling(crashData$timestamp[1]/3600)
for(i in 1:nrow(crashData)){
if(ceiling(crashData$timestamp[i]/3600) == rowNum){
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
else{
#newrow = c(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
#hourCrashDataT[rowNum] = data.frame(rowNum,rootCount, analyticsCount, dataCount, playerCount, processCrash, procEditorCrash, 0)
hourCrashDataT$Hour[rowNum] <-rowNum
hourCrashDataT$rootCrash[rowNum] <- rootCount
hourCrashDataT$analyticsCrash[rowNum] <- analyticsCount
hourCrashDataT$dataCrash[rowNum] <- dataCount
hourCrashDataT$playerCrash[rowNum] <- playerCount
hourCrashDataT$processesCrash[rowNum] <- processCrash
hourCrashDataT$processEditorCrash[rowNum] <- procEditorCrash
rowNum = ceiling(crashData$timestamp[i]/3600)
rootCount = 0
analyticsCount = 0
dataCount = 0
playerCount = 0
processCrash = 0
procEditorCrash = 0
if(crashData$current_page[i] == '/'){
rootCount = rootCount + 1
}
else if(crashData$current_page[i] == '/analytics'){
analyticsCount = analyticsCount + 1
}
else if(crashData$current_page[i] == '/data'){
dataCount = dataCount + 1
}
else if(crashData$current_page[i] == '/player'){
playerCount = playerCount + 1
}
else if(crashData$current_page[i] == '/processes'){
processCrash = processCrash + 1
}
else if(crashData$current_page[i] == '/processes/editor'){
procEditorCrash = procEditorCrash + 1
}
}
}
hourCrashDataT$Hour[28] <-rowNum
hourCrashDataT$rootCrash[28] <- rootCount
hourCrashDataT$analyticsCrash[28] <- analyticsCount
hourCrashDataT$dataCrash[28] <- dataCount
hourCrashDataT$playerCrash[28] <- playerCount
hourCrashDataT$processesCrash[28] <- processCrash
hourCrashDataT$processEditorCrash[28] <- procEditorCrash
sum(hourCrashDataT$rootCrash + hourCrashDataT$analyticsCrash + hourCrashDataT$dataCrash + hourCrashDataT$playerCrash + hourCrashDataT$processesCrash + hourCrashDataT$processEditorCrash)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(avgBytes)
shiny::runApp()
rowNumbers <- 1
dataVis <- data.frame(pages = c(levels(crashData$current_page)),crashes = c(hourCrashDataT[rowNumbers,2:7]))
View(dataVis)
dataVis <- data.frame(pages = c(levels(crashData$current_page)),crashes = c(hourCrashDataT[rowNumbers,2:7]))
View(dataVis)
View(dataVis)
View(dataVis)
c(hourCrashDataT[rowNumbers,2:7])
hourCrashDataT[rowNumbers,2:7]
dataVis <- data.frame(pages = c(levels(crashData$current_page)),crashes = hourCrashDataT[rowNumbers,2:7])
View(dataVis)
hourCrashDataT[rowNumbers,2:7]
hourCrashDataT[1,2:7]
as.numeric(hourCrashDataT[1,2:7])
dataVis <- data.frame(pages = c(levels(crashData$current_page)),crashes = as.numeric(hourCrashDataT[rowNumbers,2:7]))
View(dataVis)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
t(avgBytes)
shiny::runApp()
View(avgBytes)
shiny::runApp()
View(avgBytes)
avgBytes <- t(avgBytes)
View(avgBytes)
shiny::runApp()
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- t(avgBytes)
names(avgBytes) <- NULL
avgBytes
shiny::runApp()
shiny::runApp()
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
View(avgBytes)
avgBytes <- t(avgBytes)
View(avgBytes)
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- as.matrix(t(avgBytes))
View(avgBytes)
avgBytes <- as.numeric(t(avgBytes))
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- data.frame(t(avgBytes))
View(avgBytes)
shiny::runApp()
View(avgBytes)
shiny::runApp()
str(avgBytes)
shiny::runApp()
str(avgBytes)
avgBytes <- as.list(t(avgBytes))
avgBytes
avgBytes[[1]]
avgBytes[1
]
avgBytes <- as.matrix(t(avgBytes))
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- as.matrix(t(avgBytes))
avgBytes <- matrix(avgBytes, ncol = ncol(avgBytes), dimnames = NULL)
View(avgBytes)
shiny::runApp()
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- as.data.frame.list(t(avgBytes))
shiny::runApp()
avgBytes <- ddply(data,~current_page,summarise,"mean in MB"=round(mean(bytes_used/1000000), digits = 1))
avgBytes <- as.data.frame(t(avgBytes))
shiny::runApp()
shiny::runApp()
View(data)
shiny::runApp()
#avgBytes <- matrix(avgBytes, ncol = ncol(avgBytes), dimnames = NULL)
avgBytes <- data.table(t(avgBytes))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("dashboard", launch.browser = TRUE)
runApp("dashboard", launch.browser = TRUE)
shiny::runApp()
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='desai-memtracking', token='D4C0964332854C4221D0C83656981C79', secret='3JbKWHoMkdMax1fplxHMVc2B66pQVH3BdSTZHu/7')
library(rsconnect)
setwd("~/Documents/Tulip Dashboard")
rsconnect::deployApp('dashboard/')
rsconnect::deployApp('dashboard/')
shiny::runApp('dashboard')
rsconnect::deployApp('dashboard/')
rsconnect::showLogs()
rsconnect::deployApp('dashboard/')
shiny::runApp('dashboard')
rsconnect::deployApp('dashboard')
rsconnect::showLogs('dashboard')
rsconnect::deployApp('dashboard/')
rsconnect::showLogs('dashboard/')
rsconnect::deployApp('dashboard/')
rsconnect::showLogs('dashboard/')
rsconnect::deployApp('dashboard/')
shiny::runApp('dashboard')
require(fpp)
install.packages("fpp")
require(fpp)
plot(decompose(hsales))
plot(stl(hsales,s.window="periodic"))
plot(stl(hsales,s.window=15))
plot(hsales,col="gray")
fit <- stl(hsales,s.window=15)
hsales.sa <- seasadj(fit)
lines(hsales.sa, col="red")
data("plastics")
plot(plastics)
plot(decompose(plastics, type = "multiplicative"))
plot(plastics, col = "gray")
fit <- decompose(plastics, type = "multiplicative")
plastics.sa <- seasadj(fit)
lines(plastics.sa, col = "blue")
