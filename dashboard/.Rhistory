swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
savehistory()
savehistory("~/Documents/CSC591-BI/R Programming Tutorial/History FIles/RHistory18.Rhistory")
library(ggplot2)
library(jsonlite)
#Load JSON data
data <- fromJSON("dashboard/data/data.json")
setwd("~/Documents/Tulip Dashboard")
shiny::runApp('dashboard')
install.packages("ggplot2")
shiny::runApp('dashboard')
shiny::runApp('dashboard')
library(ggplot2)
library(jsonlite)
data <- fromJSON("dashboard/data/data.json")
shiny::runApp('dashboard')
shiny::runApp('dashboard')
setwd("~/Documents/Tulip Dashboard/dashboard")
shiny::runApp()
shiny::runApp()
seindata <- fromJSON("data.json")
data <- fromJSON("data.json")
rm(seindata)
data <- fromJSON("data.json")
shiny::runApp()
runApp("dashboard")
setwd("~/Documents/Tulip Dashboard")
runApp("dashboard")
runApp("dashboard")
#Installing required packages
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?subset
subdata <- subset(data, did_aww_snap == TRUE)
View(subdata)
summary(subdata)
subdata <- subset(data, did_aww_snap == TRUE, select = c(timestamp, current_page, bytes_used))
summary(subdata)
levels(subdata$current_page)
class(data)
class(data$current_page)
class(data$timestamp)
class(data$bytes_used)
options(scipen = 999)
data <- fromJSON("data.json")
data <- fromJSON("data.json")
setwd("~/Documents/Tulip Dashboard/dashboard")
data <- fromJSON("data.json")
subdata <- subset(data, did_aww_snap == TRUE, select = c(timestamp, current_page, bytes_used))
View(subdata)
options(scipen = default)
options(scipen)
options(scipen = 100)
data <- fromJSON("data.json")
View(data)
View(data)
data$current_page <- as.factor(data$current_page)
View(data)
levels(data$current_page)
summary(data)
getOption(scipen)
getOption(scipen, default = NULL)
options(scipen = 100)
options(scipen = 0)
data <- fromJSON("data.json")
data$current_page <- as.factor(data$current_page)
levels(data$current_page)
summary(data)
crashData <- subset(data,did_aww_snap ==TRUE)
summary(crashData)
shiny::runApp()
install_github('ramnathv/rCharts')
require(devtools)
install.packages("devtools")
require(devtools)
install_github('ramnathv/rCharts')
?rCharts
??rCharts
library(rCharts)
rPlot(current_page, data = crashData, type = 'bar')
rPlot(crashData$current_page, data = crashData, type = 'bar')
rPlot(crashData$current_page|count(crashData$current_page), data = crashData, type = 'bar')
rPlot(crashData$current_page|sum(crashData$current_page), data = crashData, type = 'bar')
install.packages("googlevis")
install.packages("googleVis")
library(googleVis)
?"googleVis"
gvisBarChart(crashData$current_page)
gvisBarChart(crashData, xvar = crashData$current_page)
summary(crashData$current_page)
cd <- summary(crashData$current_page)
cd <- as.data.frame(summary(crashData$current_page))
View(cd)
pl <- gvisBarChart(cd)
names(cd)
View(cd)
dim(cd)
cd <- as.data.frame(summary(crashData$current_page))
names(cd)
View(cd)
cd <- as.data.frame(levels(crashData$current_page),summary(crashData$current_page))
head(cd)
View(cd)
cd <- data.frame(levels(crashData$current_page),summary(crashData$current_page))
View(cd)
names(cd)
library(plyr)
View(cd)
rename(cd, c("levels.crashData.current_page."="Pages","summary.crashData.current_page."="Number of Crashes"))
rename(cd, c(""="Page","levels.crashData.current_page."="Pages","summary.crashData.current_page."="Number of Crashes"))
rename(cd, c("levels.crashData.current_page."="Pages","summary.crashData.current_page."="Number of Crashes"))
View(cd)
cd <- rename(cd, c("levels.crashData.current_page."="Pages","summary.crashData.current_page."="Number of Crashes"))
View(cd)
pl <- gvisBarChart(cd)
plot(pl)
shiny::runApp()
shiny::runApp()
View(data)
View(crashData)
shiny::runApp()
View(cd)
levels(data$current_page)
summary(data$current_page)
cd <- data.frame(v1 = c(levels(crashData$current_page),summary(crashData$current_page)), v2 = c(levels(data$current_page),summary(data$current_page)))
View(crashData)
View(cd)
cd <- data.frame(pages = c(levels(crashData$current_page)),v1 = c(levels(crashData$current_page)), v2 = c(levels(data$current_page)))
View(cd)
levels(crashData$current_page)
summary(crashData$current_page)
View(cd)
cd <- data.frame(pages = c(levels(crashData$current_page)),v1 = c(summary(crashData$current_page)), v2 = c(summary(data$current_page)))
View(cd)
shiny::runApp()
timeVsBytes <- data.frame(timeElapsed = data$timestamp, byteUsed = data$bytes_used)
shiny::runApp()
?stlm
??stlm
beforeCrash <- which(data)
beforeCrash <- which(data$did_aww_snap)
beforeCrash <- beforeCrash-1
beforeCrash <- which(data$did_aww_snap)
beforeCrash <- beforeCrash-1
summary(beforeCrash)
dataBeforeCrash <- data$bytes_used[beforeCrash]
summary(dataBeforeCrash)
options(scipen = 999)
beforeCrash <- which(data$did_aww_snap)
beforeCrash <- beforeCrash-1
dataBeforeCrash <- data$bytes_used[beforeCrash]
summary(dataBeforeCrash)
data <- fromJSON("data.json")
data$current_page <- as.factor(data$current_page)
levels(data$current_page)
beforeCrash <- which(data$did_aww_snap)
beforeCrash <- beforeCrash-1
dataBeforeCrash <- data$bytes_used[beforeCrash]
summary(dataBeforeCrash)
data$bytes_used[34]
data$bytes_used[75]
mean(dataBeforeCrash)
sd(dataBeforeCrash)
shiny::runApp()
181733500 + 5293014 + 5293014
181733500 - 5293014 - 5293014
dataBackup <- data
dataBackup$timestamp = dataBackup$timestamp - 1443733964
View(dataBackup)
tail(dataBackup)
freq <- length(which(dataBackup$current_page))/range(dataBackup$timestamp)
freq <- length(which(dataBackup$did_aww_snap))/range(dataBackup$timestamp)
freq
length(which(dataBackup$did_aww_snap))
range(dataBackup$timestamp)
freq <- length(which(dataBackup$did_aww_snap))/99995
freq
freq <- length(which(dataBackup$did_aww_snap))/(99995/60)
freq
freq <- length(which(dataBackup$did_aww_snap))/(99995/3600)
freq
181733500 + 5293014
181733500 - 5293014
shiny::runApp()
library(plyr)
library(googleVis)
library(ggplot2)
library(rjson)
library(plyr)
library(shiny)
setwd("~/Documents/Tulip Dashboard")
runApp("dashboard")
